/***************************************************************************
 *
 *                      Pollex Mobile Platform
 *
 * Copyright (c) 2004 by Pollex Mobile Software Co., Ltd. 
 *                       All Rights Reserved 
 *
 * Module   : Display Driver
 *
 * Purpose  : Define the physical pen style and physical brush pattern.
 *            
\**************************************************************************/

#ifndef __PATTERN_H
#define __PATTERN_H

#define NUM_HATCHPATTERN    9

#if (BRUSH_WIDTH == 32)
static const unsigned char pattern_data[NUM_HATCHPATTERN][64] = 
{
    /* bdiagonal */
    0x11, 0x11, 0x11, 0x11,
    0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44,
    0x88, 0x88, 0x88, 0x88,
    0x11, 0x11, 0x11, 0x11,
    0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44,
    0x88, 0x88, 0x88, 0x88,
    0x11, 0x11, 0x11, 0x11,
    0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44,
    0x88, 0x88, 0x88, 0x88,
    0x11, 0x11, 0x11, 0x11,
    0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44,
    0x88, 0x88, 0x88, 0x88,

    /* cross */
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0xff, 0xff, 0xff, 0xff,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0xff, 0xff, 0xff, 0xff,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0xff, 0xff, 0xff, 0xff,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0xff, 0xff, 0xff, 0xff,

    /* diagcross */
    0xaa, 0xaa, 0xaa, 0xaa,
    0x44, 0x44, 0x44, 0x44,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x11, 0x11, 0x11, 0x11,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x44, 0x44, 0x44, 0x44,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x11, 0x11, 0x11, 0x11,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x44, 0x44, 0x44, 0x44,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x11, 0x11, 0x11, 0x11,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x44, 0x44, 0x44, 0x44,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x11, 0x11, 0x11, 0x11,

    /* fdiagonal */
    0x88, 0x88, 0x88, 0x88,
    0x44, 0x44, 0x44, 0x44,
    0x22, 0x22, 0x22, 0x22,
    0x11, 0x11, 0x11, 0x11,
    0x88, 0x88, 0x88, 0x88,
    0x44, 0x44, 0x44, 0x44,
    0x22, 0x22, 0x22, 0x22,
    0x11, 0x11, 0x11, 0x11,
    0x88, 0x88, 0x88, 0x88,
    0x44, 0x44, 0x44, 0x44,
    0x22, 0x22, 0x22, 0x22,
    0x11, 0x11, 0x11, 0x11,
    0x88, 0x88, 0x88, 0x88,
    0x44, 0x44, 0x44, 0x44,
    0x22, 0x22, 0x22, 0x22,
    0x11, 0x11, 0x11, 0x11,

    /* horizontal */
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff,

    /* vertical */
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22,

    /* sieve and gray */
    0xaa, 0xaa, 0xaa, 0xaa,
    0x55, 0x55, 0x55, 0x55,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x55, 0x55, 0x55, 0x55,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x55, 0x55, 0x55, 0x55,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x55, 0x55, 0x55, 0x55,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x55, 0x55, 0x55, 0x55,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x55, 0x55, 0x55, 0x55,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x55, 0x55, 0x55, 0x55,
    0xaa, 0xaa, 0xaa, 0xaa,
    0x55, 0x55, 0x55, 0x55,

    /* lightgray */
    0x55, 0x55, 0x55, 0x55,
    0x00, 0x00, 0x00, 0x00,
    0x55, 0x55, 0x55, 0x55,
    0x00, 0x00, 0x00, 0x00,
    0x55, 0x55, 0x55, 0x55,
    0x00, 0x00, 0x00, 0x00,
    0x55, 0x55, 0x55, 0x55,
    0x00, 0x00, 0x00, 0x00,
    0x55, 0x55, 0x55, 0x55,
    0x00, 0x00, 0x00, 0x00,
    0x55, 0x55, 0x55, 0x55,
    0x00, 0x00, 0x00, 0x00,
    0x55, 0x55, 0x55, 0x55,
    0x00, 0x00, 0x00, 0x00,
    0x55, 0x55, 0x55, 0x55,
    0x00, 0x00, 0x00, 0x00,

    /* wall */
    0x00, 0x40, 0x00, 0x40,
    0xff, 0xff, 0xff, 0xff,
    0x40, 0x00, 0x40, 0x00,
    0x40, 0x00, 0x40, 0x00,
    0x40, 0x00, 0x40, 0x00,
    0x40, 0x00, 0x40, 0x00,
    0x40, 0x00, 0x40, 0x00,
    0x40, 0x00, 0x40, 0x00,
    0x40, 0x00, 0x40, 0x00,
    0xff, 0xff, 0xff, 0xff,
    0x00, 0x40, 0x00, 0x40,
    0x00, 0x40, 0x00, 0x40,
    0x00, 0x40, 0x00, 0x40,
    0x00, 0x40, 0x00, 0x40,
    0x00, 0x40, 0x00, 0x40,
    0x00, 0x40, 0x00, 0x40
};

#else

static const unsigned char pattern_data[NUM_HATCHPATTERN][8] = {
    // bdiagonal:
    {
        0x01,//00000001
        0x02,//00000010
        0x04,//00000100
        0x08,//00001000
        0x10,//00010000
        0x20,//00100000
        0x40,//01000000
        0x80,//10000000
    },
    
    //HS_CROSS:     
    {
        0x80,//00001000
        0x80,//00001000
        0x80,//00001000
        0x80,//00001000
        0xff,//11111111
        0x80,//00001000
        0x80,//00001000
        0x80,//00001000
    },
    
    //HS_DIAGCROSS:
    {
        0x81,//10000001
        0x42,//01000010
        0x24,//00100100
        0x18,//00011000
        0x18,//00011000
        0x24,//00100100
        0x42,//01000010
        0x81,//10000001
    },
    
    // HS_FDIAGONAL:  
    {
        0x80,//10000000
        0x40,//01000000
        0x20,//00100000
        0x10,//00010000
        0x08,//00001000
        0x04,//00000100
        0x02,//00000010
        0x01,//00000001
    },
    
    //horizonal:    
    {
        0x00,//00000000                  
        0x00,//00000000
        0x00,//00000000                  
        0x00,//00000000                  
        0xff,//11111111
        0x00,//00000000                  
        0x00,//00000000
        0x00,//00000000
    },
    // HS_VERTICAL:   
    {
        0x80,//00001000
        0x80,//00001000
        0x80,//00001000
        0x80,//00001000
        0x80,//00001000
        0x80,//00001000
        0x80,//00001000
        0x80,//00001000
    },
    
    //SIEVE AND GRAY:
    {
        0xaa,//10101010
        0x55,//01010101
        0xaa,//10101010
        0x55,//01010101
        0xaa,//10101010
        0x55,//01010101
        0xaa,//10101010
        0x55,//01010101
    },
    
    //LIGHTGRAY:
    {
        0x55,//01010101
        0x00,//00000000
        0x55,//01010101
        0x00,//00000000
        0x55,//01010101
        0x00,//00000000
        0x55,//01010101
        0x00,//00000000
    },
    
    //WALL:
    {
        0xff,//    11111111  0x44,//01000100            
        0x08,//    00001000  0x11,//00010001       
        0x08,//    00001000  0x44,//01000100        
        0x08,//    00001000  0x11,//00010001       
        0xff,//    11111111  0x44,//01000100        
        0x80,//    10000000  0x11,//00010001       
        0x80,//    10000000  0x44,//01000100        
        0x80,//    10000000  0x11,//00010001        
    }
    /*
    0xff,//    11111111  0x44,//01000100            
    0x44,//    01000100  0x11,//00010001       
    0x44,//    01000100  0x44,//01000100        
    0x44,//    01000100  0x11,//00010001       
    0xff,//    11111111  0x44,//01000100        
    0x11,//    00010001  0x11,//00010001       
    0x11,//    00010001  0x44,//01000100        
    0x11,//    00010001  0x11,//00010001        
    */
};

#endif
/*
static const unsigned long pen_style_pattern[8] = {
0xffffffffL, 0xccccccccL, 0xaaaaaaaaL, 
0xe4e4e4e4L, 0xeaeaeaeaL, 0x00000000L 
};
*/

/*
static const unsigned short pen_style_pattern[8] = {
0xffff, //PS_SOLID  
0xfff0, //PS_DASH       1111111111110000 1111111111110000
0xcccc, //PS_DOT        1100110011001100 1100110011001100
0xff18, //PS_DASHDOT    1111111100011000 1111111100011000
0xfccc, //PS_DASHDOTDOT 1111110011001100 1111110011001100
0x0000  //PS_NULL
};
*/

typedef struct tagPenStyle
{
    int count;          /* The count of pen pattern bits               */
    uint32 pattern;     /* The pen pattern defined by a series of bits */
} PENSTYLE, *PPENSTYLE;

static PENSTYLE PenStyles[] = 
{
    { 1, 0x80000000L}, // PS_SOLID, 实线笔: 1
    { 7, 0xF8000000L}, // PS_DASH, 虚线笔 : 11111
    { 2, 0x80000000L}, // PS_DOT, 点线笔  : 10
    {10, 0xF9000000L}, // PS_DASHDOT, 点划线笔 : 1111100100
    {18, 0xFF330000L}, // PS_DASHDOTDOT, 双点划线笔 : 111111110011001100
};



#define DISP_MAX_WIDTH      1024
#define DISP_MAX_HEIGHT     768

typedef struct _tagStretchPattern{
    BYTE    bWidthPattern[DISP_MAX_WIDTH];
    BYTE    bHeightPattern[DISP_MAX_HEIGHT];
    /*
    WORD    wWidthStep;
    WORD    wHeightStep;
    WORD    wWidthShort;
    WORD    wHeightShort;
    DWORD   dwWidthPattern[DISP_MAX_WIDTH / 4];
    DWORD   dwHeightPattern[DISP_MAX_HEIGHT / 4];
    */
}STRETCHPATTERN, *PSTRETCHPATTERN;

typedef struct _tagDIStretchBltParam
{
    DWORD   dest_width_origin;
    DWORD   dest_height_origin;
    DWORD   src_width_origin;
    DWORD   src_height_origin;
    DWORD   src_x_offset;
    DWORD   src_y_offset;
    RECT    dest_rc;
    RECT    src_rc;
    STRETCHPATTERN  stretchpattern;
}DISTRBLTPARAM, *PDISTRBLTPARAM;

#endif  // __PATTERN_H
