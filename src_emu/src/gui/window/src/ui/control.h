/***************************************************************************
 *
 *                      Pollex Mobile Platform
 *
 * Copyright (c) 2004 by Pollex Mobile Software Co., Ltd. 
 *                       All Rights Reserved 
 *
 * Module   : Window
 *
 * Purpose  : 
 *
\**************************************************************************/



#define ES_COMBOEDIT        0x8000L

#define LBS_COMBOLBOX       0x8000L



#define WM_ENDLOOP          (WM_USER + 1)



//For Edit Control

#define MULTI_DEFLENGTH	    1024

#define MULTI_MAXLENGTH	    65535

#define SINGLE_DEFLENGTH	128

#define SINGLE_MAXLENGTH	256



/* Scroll bar styles */

#define SBS_HORZ                    0x0000L

#define SBS_VERT                    0x0001L

#define SBS_NCSCROLL                0x0002L

#define SBS_CHILDWND                0x0004L



#define WM_SYSTIMER     0x03F1



UINT WINAPI SetSystemTimer(HWND hWnd, UINT uIDEvent, UINT uElapse, 

                           TIMERPROC pTimerFunc);

BOOL WINAPI KillSystemTimer(HWND hWnd, UINT uIDEvent);



#if (INTERFACE_MONO)



// Arrow bitmap data



#define LRARROW_BMP_WIDTH   5

#define LRARROW_BMP_HEIGHT  9

#define UDARROW_BMP_WIDTH   9

#define UDARROW_BMP_HEIGHT  5

#define COLOR_TRANSBK RGB(255, 0, 255)

#if 0

#if (COLUMN_BITMAP)

static const BYTE UpArrowBmpData[] =

{

    0xF0, 0x00, 0x00, 0x00,    // 11110000000000000000000000000000

    0xE0, 0x00, 0x00, 0x00,    // 11100000000000000000000000000000

    0xC0, 0x00, 0x00, 0x00,    // 11000000000000000000000000000000

    0x80, 0x00, 0x00, 0x00,    // 10000000000000000000000000000000

    0x00, 0x00, 0x00, 0x00,    // 00000000000000000000000000000000

    0x80, 0x00, 0x00, 0x00,    // 10000000000000000000000000000000

    0xC0, 0x00, 0x00, 0x00,    // 11000000000000000000000000000000

    0xE0, 0x00, 0x00, 0x00,    // 11100000000000000000000000000000

    0xF0, 0x00, 0x00, 0x00     // 11110000000000000000000000000000

};

#else // COLUMN_BITMAP

static const BYTE UpArrowBmpData[] =

{

    0xF7, 0x80, 0x00, 0x00,    // 11110111100000000000000000000000

    0xE3, 0x80, 0x00, 0x00,    // 11100011100000000000000000000000

    0xC1, 0x80, 0x00, 0x00,    // 11000001100000000000000000000000

    0x80, 0x80, 0x00, 0x00,    // 10000000100000000000000000000000

    0x00, 0x00, 0x00, 0x00     // 00000000000000000000000000000000

};

#endif // COLUMN_BITMAP



#if (COLUMN_BITMAP)

static const BYTE UpArrowDisabledBmpData[] =

{

    0xF0, 0x00, 0x00, 0x00,    // 11110000000000000000000000000000

    0xE8, 0x00, 0x00, 0x00,    // 11101000000000000000000000000000

    0xD0, 0x00, 0x00, 0x00,    // 11010000000000000000000000000000

    0xA8, 0x00, 0x00, 0x00,    // 10101000000000000000000000000000

    0x50, 0x00, 0x00, 0x00,    // 01010000000000000000000000000000

    0xA8, 0x00, 0x00, 0x00,    // 10101000000000000000000000000000

    0xD0, 0x00, 0x00, 0x00,    // 11010000000000000000000000000000

    0xE8, 0x00, 0x00, 0x00,    // 11101000000000000000000000000000

    0xF0, 0x00, 0x00, 0x00     // 11110000000000000000000000000000

};

#else // COLUMN_BITMAP

static const BYTE UpArrowDisabledBmpData[] =

{

    0xF7, 0x80, 0x00, 0x00,    // 11110111100000000000000000000000

    0xEB, 0x80, 0x00, 0x00,    // 11101011100000000000000000000000

    0xD5, 0x80, 0x00, 0x00,    // 11010101100000000000000000000000

    0xAA, 0x80, 0x00, 0x00,    // 10101010100000000000000000000000

    0x55, 0x00, 0x00, 0x00     // 01010101000000000000000000000000

};

#endif // COLUMN_BITMAP



#if (COLUMN_BITMAP)

static const BYTE DownArrowBmpData[] = 

{

    0x78, 0x00, 0x00, 0x00,    // 01111000000000000000000000000000

    0x38, 0x00, 0x00, 0x00,    // 00111000000000000000000000000000

    0x18, 0x00, 0x00, 0x00,    // 00011000000000000000000000000000

    0x08, 0x00, 0x00, 0x00,    // 00001000000000000000000000000000

    0x00, 0x00, 0x00, 0x00,    // 00000000000000000000000000000000

    0x08, 0x00, 0x00, 0x00,    // 00001000000000000000000000000000

    0x18, 0x00, 0x00, 0x00,    // 00011000000000000000000000000000

    0x38, 0x00, 0x00, 0x00,    // 00111000000000000000000000000000

    0x78, 0x00, 0x00, 0x00     // 01111000000000000000000000000000

};

#else

static const BYTE DownArrowBmpData[] = 

{

    0x00, 0x00, 0x00, 0x00,    // 00000000000000000000000000000000

    0x80, 0x80, 0x00, 0x00,    // 10000000100000000000000000000000

    0xC1, 0x80, 0x00, 0x00,    // 11000001100000000000000000000000

    0xE3, 0x80, 0x00, 0x00,    // 11100011100000000000000000000000

    0xF7, 0x80, 0x00, 0x00     // 11110111100000000000000000000000

};

#endif



#if (COLUMN_BITMAP)

static const BYTE DownArrowDisabledBmpData[] = 

{

    0x78, 0x00, 0x00, 0x00,    // 01111000000000000000000000000000

    0xB8, 0x00, 0x00, 0x00,    // 10111000000000000000000000000000

    0x58, 0x00, 0x00, 0x00,    // 01011000000000000000000000000000

    0xA8, 0x00, 0x00, 0x00,    // 10101000000000000000000000000000

    0x50, 0x00, 0x00, 0x00,    // 01010000000000000000000000000000

    0xA8, 0x00, 0x00, 0x00,    // 10101000000000000000000000000000

    0x58, 0x00, 0x00, 0x00,    // 01011000000000000000000000000000

    0xB8, 0x00, 0x00, 0x00,    // 10111000000000000000000000000000

    0x78, 0x00, 0x00, 0x00     // 01111000000000000000000000000000

};

#else

static const BYTE DownArrowDisabledBmpData[] = 

{

    0x55, 0x00, 0x00, 0x00,    // 01010101000000000000000000000000

    0xAA, 0x80, 0x00, 0x00,    // 10101010100000000000000000000000

    0xD5, 0x80, 0x00, 0x00,    // 11010101100000000000000000000000

    0xEB, 0x80, 0x00, 0x00,    // 11101011100000000000000000000000

    0xF7, 0x80, 0x00, 0x00     // 11110111100000000000000000000000

};

#endif



#if (COLUMN_BITMAP)

static const BYTE LeftArrowBmpData[] = 

{

    0x00, 0x00, 0x00, 0x00,    // 00000000000000000000000000000000

    0x80, 0x80, 0x00, 0x00,    // 10000000100000000000000000000000

    0xC1, 0x80, 0x00, 0x00,    // 11000001100000000000000000000000

    0xE3, 0x80, 0x00, 0x00,    // 11100011100000000000000000000000

    0xF7, 0x80, 0x00, 0x00     // 11110111100000000000000000000000

};

#else

static const BYTE LeftArrowBmpData[] = 

{

    0xF0, 0x00, 0x00, 0x00,    // 11110000000000000000000000000000

    0xE0, 0x00, 0x00, 0x00,    // 11100000000000000000000000000000

    0xC0, 0x00, 0x00, 0x00,    // 11000000000000000000000000000000

    0x80, 0x00, 0x00, 0x00,    // 10000000000000000000000000000000

    0x00, 0x00, 0x00, 0x00,    // 00000000000000000000000000000000

    0x80, 0x00, 0x00, 0x00,    // 10000000000000000000000000000000

    0xC0, 0x00, 0x00, 0x00,    // 11000000000000000000000000000000

    0xE0, 0x00, 0x00, 0x00,    // 11100000000000000000000000000000

    0xF0, 0x00, 0x00, 0x00     // 11110000000000000000000000000000

};

#endif



#if (COLUMN_BITMAP)

static const BYTE LeftArrowDisabledBmpData[] = 

{

    0x55, 0x00, 0x00, 0x00,    // 01010101000000000000000000000000

    0xAA, 0x80, 0x00, 0x00,    // 10101010100000000000000000000000

    0xD5, 0x80, 0x00, 0x00,    // 11010101100000000000000000000000

    0xEB, 0x80, 0x00, 0x00,    // 11101011100000000000000000000000

    0xF7, 0x80, 0x00, 0x00     // 11110111100000000000000000000000

};

#else

static const BYTE LeftArrowDisabledBmpData[] = 

{

    0xF0, 0x00, 0x00, 0x00,    // 11110000000000000000000000000000

    0xE8, 0x00, 0x00, 0x00,    // 11101000000000000000000000000000

    0xD0, 0x00, 0x00, 0x00,    // 11010000000000000000000000000000

    0xA8, 0x00, 0x00, 0x00,    // 10101000000000000000000000000000

    0x50, 0x00, 0x00, 0x00,    // 01010000000000000000000000000000

    0xA8, 0x00, 0x00, 0x00,    // 10101000000000000000000000000000

    0xD0, 0x00, 0x00, 0x00,    // 11010000000000000000000000000000

    0xE8, 0x00, 0x00, 0x00,    // 11101000000000000000000000000000

    0xF0, 0x00, 0x00, 0x00     // 11110000000000000000000000000000

};

#endif



#if (COLUMN_BITMAP)

static const BYTE RightArrowBmpData[] = 

{

    0xF7, 0x80, 0x00, 0x00,    // 11110111100000000000000000000000

    0xE3, 0x80, 0x00, 0x00,    // 11100011100000000000000000000000

    0xC1, 0x80, 0x00, 0x00,    // 11000001100000000000000000000000

    0x80, 0x80, 0x00, 0x00,    // 10000000100000000000000000000000

    0x00, 0x00, 0x00, 0x00     // 00000000000000000000000000000000

};

#else

static const BYTE RightArrowBmpData[] = 

{

    0x78, 0x00, 0x00, 0x00,    // 01111000000000000000000000000000

    0x38, 0x00, 0x00, 0x00,    // 00111000000000000000000000000000

    0x18, 0x00, 0x00, 0x00,    // 00011000000000000000000000000000

    0x08, 0x00, 0x00, 0x00,    // 00001000000000000000000000000000

    0x00, 0x00, 0x00, 0x00,    // 00000000000000000000000000000000

    0x08, 0x00, 0x00, 0x00,    // 00001000000000000000000000000000

    0x18, 0x00, 0x00, 0x00,    // 00011000000000000000000000000000

    0x38, 0x00, 0x00, 0x00,    // 00111000000000000000000000000000

    0x78, 0x00, 0x00, 0x00     // 01111000000000000000000000000000

};

#endif



#if (COLUMN_BITMAP)

static const BYTE RightArrowDisabledBmpData[] = 

{

    0xF7, 0x80, 0x00, 0x00,    // 11110111100000000000000000000000

    0xEB, 0x80, 0x00, 0x00,    // 11101011100000000000000000000000

    0xD5, 0x80, 0x00, 0x00,    // 11010101100000000000000000000000

    0xAA, 0x80, 0x00, 0x00,    // 10101010100000000000000000000000

    0x55, 0x00, 0x00, 0x00     // 01010101000000000000000000000000

};

#else

static const BYTE RightArrowDisabledBmpData[] = 

{

    0x78, 0x00, 0x00, 0x00,    // 01111000000000000000000000000000

    0xB8, 0x00, 0x00, 0x00,    // 10111000000000000000000000000000

    0x58, 0x00, 0x00, 0x00,    // 01011000000000000000000000000000

    0xA8, 0x00, 0x00, 0x00,    // 10101000000000000000000000000000

    0x50, 0x00, 0x00, 0x00,    // 01010000000000000000000000000000

    0xA8, 0x00, 0x00, 0x00,    // 10101000000000000000000000000000

    0x58, 0x00, 0x00, 0x00,    // 01011000000000000000000000000000

    0xB8, 0x00, 0x00, 0x00,    // 10111000000000000000000000000000

    0x78, 0x00, 0x00, 0x00     // 01111000000000000000000000000000

};

#endif
#endif



#else // INTERFACE_MONO



#define LRARROW_BMP_WIDTH   4

#define LRARROW_BMP_HEIGHT  7

#define UDARROW_BMP_WIDTH   7

#define UDARROW_BMP_HEIGHT  4


#if 0
#if (COLUMN_BITMAP)

static const BYTE UpArrowBmpData[] =

{

    0xE0,0x00,0x00,0x00,     //11100000000000000000000000000000

    0xC0,0x00,0x00,0x00,     //11000000000000000000000000000000

    0x80,0x00,0x00,0x00,     //10000000000000000000000000000000

    0x00,0x00,0x00,0x00,     //00000000000000000000000000000000

    0x80,0x00,0x00,0x00,     //10000000000000000000000000000000

    0xC0,0x00,0x00,0x00,     //11000000000000000000000000000000

    0xE0,0x00,0x00,0x00      //11100000000000000000000000000000

};

#else

static const BYTE UpArrowBmpData[] = 

{

    0xEE,0x00,0x00,0x00,     // 11101110000000000000000000000000

    0xC6,0x00,0x00,0x00,     // 11000110000000000000000000000000

    0x82,0x00,0x00,0x00,     // 10000010000000000000000000000000

    0x00,0x00,0x00,0x00      // 00000000000000000000000000000000

};

#endif



#if (COLUMN_BITMAP)

static const BYTE DownArrowBmpData[] = 

{

    0x70,0x00,0x00,0x00,    // 01110000000000000000000000000000

    0x30,0x00,0x00,0x00,    // 00110000000000000000000000000000

    0x10,0x00,0x00,0x00,    // 00010000000000000000000000000000

    0x00,0x00,0x00,0x00,    // 00000000000000000000000000000000

    0x10,0x00,0x00,0x00,    // 00010000000000000000000000000000

    0x30,0x00,0x00,0x00,    // 00110000000000000000000000000000

    0x70,0x00,0x00,0x00     // 01110000000000000000000000000000

};

#else

static const BYTE DownArrowBmpData[] = 

{

    0x00,0x00,0x00,0x00,    // 00000000000000000000000000000000

    0x82,0x00,0x00,0x00,    // 10000010000000000000000000000000

    0xC6,0x00,0x00,0x00,    // 11000110000000000000000000000000

    0xEE,0x00,0x00,0x00     // 11101110000000000000000000000000

};

#endif



#if (COLUMN_BITMAP)

static const BYTE LeftArrowBmpData[] = 

{

    0x00,0x00,0x00,0x00,    // 00000000000000000000000000000000

    0x82,0x00,0x00,0x00,    // 10000010000000000000000000000000

    0xC6,0x00,0x00,0x00,    // 11000110000000000000000000000000

    0xEE,0x00,0x00,0x00     // 11101110000000000000000000000000

};

#else

static const BYTE LeftArrowBmpData[] = 

{

    0xE0,0x00,0x00,0x00,    // 11100000000000000000000000000000

    0xC0,0x00,0x00,0x00,    // 11000000000000000000000000000000

    0x80,0x00,0x00,0x00,    // 10000000000000000000000000000000

    0x00,0x00,0x00,0x00,    // 00000000000000000000000000000000

    0x80,0x00,0x00,0x00,    // 10000000000000000000000000000000

    0xC0,0x00,0x00,0x00,    // 11000000000000000000000000000000

    0xE0,0x00,0x00,0x00     // 11100000000000000000000000000000

};

#endif



#if (COLUMN_BITMAP)

static const BYTE RightArrowBmpData[] = 

{

    0xEE,0x00,0x00,0x00,    // 11101110000000000000000000000000

    0xC6,0x00,0x00,0x00,    // 11000110000000000000000000000000

    0x82,0x00,0x00,0x00,    // 10000010000000000000000000000000

    0x00,0x00,0x00,0x00,    // 00000000000000000000000000000000

};

#else

static const BYTE RightArrowBmpData[] = 

{

    0x70,0x00,0x00,0x00,    // 01110000000000000000000000000000

    0x30,0x00,0x00,0x00,    // 00110000000000000000000000000000

    0x10,0x00,0x00,0x00,    // 00010000000000000000000000000000

    0x00,0x00,0x00,0x00,    // 0000000000000000000000000000000

    0x10,0x00,0x00,0x00,    // 00010000000000000000000000000000

    0x30,0x00,0x00,0x00,    // 00110000000000000000000000000000

    0x70,0x00,0x00,0x00     // 01110000000000000000000000000000

};

#endif
#endif 



#endif // INTERFACE_MONO



typedef struct
{
    BYTE  byPenDown;
    BYTE  bDisabled;
	BYTE  bLTArrowDisabled;
	BYTE  bRBArrowDisabled;
    BYTE  byVScroll;
    BYTE  bNeedReDraw;
    BYTE  nTimerCount;
    BYTE  bTimerIn;
    UINT  uTimerID;
    WORD  wLineRangeLogic;
    WORD  wLineRange;
    int   nMaxRangeLogic;
    int   nMinRangeLogic;
    UINT  nPageRangeLogic;
    int   nPosLogic;
    int   nTrackPosLogic;
    int   nMaxRange;
    int   nMinRange;
    UINT  nPageRange;
    int   nPos;
    int   nTrackPos;
    //WORD  wLineRange;
	UINT  ThumbRange;
	UINT  ThumbToPosRange;//Distance of thumb position to mouse position, When drag thumb.
	IWORD curPenX;
	IWORD curPenY;
    int   nOldPosLogic;
    int   nOldPos;
    int   nCYVScroll;
    HWND  hwndParent;
} SCROLLDATA, *PSCROLLDATA;



void SB_Init(PSCROLLDATA pScrollData, DWORD wStyle, HWND hwndParent);

int  SB_Size(PSCROLLDATA pScrollData, int nMaxRange);

void SB_Paint(HDC hdc, PSCROLLDATA pScrollData, const RECT* pRect);

void SB_PenProcess(HWND hWnd, HDC hdc, PSCROLLDATA pScrollData, const RECT* pRect, 

                   UINT wMsgCmd, LPARAM lParam);

void SB_Timer(HWND hWnd, HDC hdc, PSCROLLDATA pScrollData, const RECT* pRect);

BOOL SB_GetScrollInfo(PSCROLLDATA pScrollData, LPARAM lParam);

int  SB_SetScrollInfo(HDC hdc, PSCROLLDATA pScrollData, 

                      const RECT* pRect, WPARAM wParam, LPARAM lParam);

int  SB_SetPos(HDC hdc, PSCROLLDATA pScrollData, 

                      const RECT* pRect, WPARAM wParam, LPARAM lParam);

int  SB_GetPos(PSCROLLDATA pScrollData);

int  SB_SetRange(PSCROLLDATA pScrollData, WPARAM wParam, LPARAM lParam);

int  SB_GetRange(PSCROLLDATA pScrollData, WPARAM wParam, LPARAM lParam);

int  SB_SetRangeRedraw(HDC hdc, PSCROLLDATA pScrollData, 

                      const RECT* pRect, WPARAM wParam, LPARAM lParam);

BOOL SB_Enable_Arrows(HDC hdc, PSCROLLDATA pScrollData, 

                      const RECT* pRect, WPARAM wParam);

BOOL SB_IsEnabled(PSCROLLDATA pScrollData, PCSCROLLINFO pScrollInfo);
